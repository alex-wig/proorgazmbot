import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, ContextTypes, filters
)
from fastapi import FastAPI, Request
import uvicorn

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = os.environ.get("BOT_TOKEN", "7985540950:AAGs_x79yOybKywqCOfi0Rs4ZjdQukML4NU")
WEBHOOK_URL = os.environ.get("https://proorgazmbot.onrender.com", "https://your-service.onrender.com")
ADMIN_CHAT_ID = 446370284

# === –î–ê–ù–ù–´–ï ===
services = [
    {"id": "s1", "name": "120 –º–∏–Ω—É—Ç"},
    {"id": "s2", "name": "180 –º–∏–Ω—É—Ç"},
    {"id": "s3", "name": "90 –º–∏–Ω—É—Ç"},
    {"id": "s4", "name": "240 –º–∏–Ω—É—Ç"},
    {"id": "s5", "name": "–≠—Ä–æ–º–∞—Å—Å–∞–∂ –≤ 4 —Ä—É–∫–∏"},
    {"id": "s6", "name": "–ú–∞—Å—Å–∞–∂ –¥–ª—è –∂–µ–Ω—ã –≤ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–∏ –º—É–∂–∞"},
]

masters = [
    {"id": "m1", "name": "–≠–¥—É–∞—Ä–¥ –ë–æ–Ω–¥–∞—Ä–µ–Ω–∫–æ"},
    {"id": "m2", "name": "–°–µ—Ä–≥–µ–π –ë–æ–≥–¥–∞–Ω–æ–≤"},
    {"id": "m3", "name": "–ò–ª—å—è –°–æ–±–æ–ª–µ–≤"},
    {"id": "m4", "name": "–ì–ª–µ–± –ö–æ—É—ç–Ω"},
    {"id": "m5", "name": "–ú–∞–π–∫–ª –ë—Ä–∞–Ω–¥—Ç"},
    {"id": "m6", "name": "–ê–Ω–¥—Ä–µ–π –ü–æ–¥–æ–ª—å—Å–∫–∏–π"},
]

user_data = {}

app = FastAPI()

telegram_app = ApplicationBuilder().token(BOT_TOKEN).build()


# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton(s["name"], callback_data=f"service:{s['id']}")] for s in services]
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∞–ª–æ–Ω Pro Orgazm!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–∞—Å—Å–∞–∂–∞:",
        reply_markup=InlineKeyboardMarkup(keyboard),
    )


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    data = query.data

    if data.startswith("service:"):
        service_id = data.split(":")[1]
        service = next((s["name"] for s in services if s["id"] == service_id), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        user_data[user_id] = {"service": service}
        keyboard = [[InlineKeyboardButton(m["name"], callback_data=f"master:{m['id']}")] for m in masters]
        await query.edit_message_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {service}\n–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard),
        )

    elif data.startswith("master:"):
        master_id = data.split(":")[1]
        master = next((m["name"] for m in masters if m["id"] == master_id), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        user_data[user_id]["master"] = master
        await query.edit_message_text(
            f"–û—Ç–ª–∏—á–Ω–æ! –ú–∞—Å—Ç–µ—Ä: {master}.\n\nüìû –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:"
        )


async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id in user_data:
        phone = update.message.text
        info = user_data[user_id]
        name = update.message.from_user.full_name
        text = f"üì© –ù–æ–≤—ã–π –ª–∏–¥ –æ—Ç {name}:\n\nüïí –£—Å–ª—É–≥–∞: {info['service']}\nüíÜ –ú–∞—Å—Ç–µ—Ä: {info['master']}\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
        await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=text)

        await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ! –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏. –¢–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä:")
        keyboard = [
            [InlineKeyboardButton("üí¨ WhatsApp", url="https://wa.me/79999999999")],
            [InlineKeyboardButton("üì≤ Telegram", url="https://t.me/YOUR_SUPPORT_USERNAME")]
        ]
        await update.message.reply_text("–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=InlineKeyboardMarkup(keyboard))
        del user_data[user_id]
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å /start")


# === –í–µ–±—Ö—É–∫–∏ –∏ –∑–∞–ø—É—Å–∫ ===
telegram_app.add_handler(CommandHandler("start", start))
telegram_app.add_handler(CallbackQueryHandler(button_handler))
telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))


@app.on_event("startup")
async def setup_webhook():
    await telegram_app.bot.set_webhook(f"{WEBHOOK_URL}/webhook")


@app.post("/webhook")
async def process_update(request: Request):
    update = Update.de_json(data=await request.json(), bot=telegram_app.bot)
    await telegram_app.process_update(update)
    return {"ok": True}


if __name__ == "__main__":
    uvicorn.run("bot:app", host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))
